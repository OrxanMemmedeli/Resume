@model Resume.Models.ViewModels.ResumeViewModel
@{
    Layout = null;
    string educationDate = string.Empty;
    string experienceDate = string.Empty;
    string docName = Model.Info.Name.Replace(" ", "_") + " " + Model.Info.Surname.Replace(" ", "_") + ".pdf";
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width" />
    <title>DownloadCV</title>
    <meta name="author" content="Khan">
    <meta name="description" content="M. Orxan CV/Resume">
    <meta name="keywords" content="Khan">
    <link rel="icon" type="image/png" sizes="16x16" href="~/images/logos/KHAN.jpg">

    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/jquery-3.5.1.js">

    <link href="~/Resume/style.css" rel="stylesheet" />
    <style>
        .button {
            margin-left: 40vw;
        }

        .btn {
            background-color: #013809;
            border: none;
            color: white;
            padding: 12px 30px;
            cursor: pointer;
            font-size: 20px;
            border-radius: 5px;
        }

            .btn:hover {
                background-color: #00610f;
            }

        .highcharts-figure, .highcharts-data-table table {
            min-width: 320px;
            max-width: 700px;
            margin: 1em auto;
        }

        .highcharts-data-table table {
            font-family: Verdana, sans-serif;
            border-collapse: collapse;
            border: 1px solid #EBEBEB;
            margin: 10px auto;
            text-align: center;
            width: 100%;
            max-width: 500px;
        }

        .highcharts-data-table caption {
            padding: 1em 0;
            font-size: 1.2em;
            color: #555;
        }

        .highcharts-data-table th {
            font-weight: 600;
            padding: 0.5em;
        }

        .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {
            padding: 0.5em;
        }

        .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {
            background: #f8f8f8;
        }

        .highcharts-data-table tr:hover {
            background: #f1f7ff;
        }

    </style>
    <script>
        window.addEventListener("pageshow", function (event) {
            var historyTraversal = event.persisted ||
                (typeof window.performance != "undefined" &&
                    window.performance.navigation.type === 2);
            if (historyTraversal) {
                // Handle page restore.
                window.location.reload(true);
            }
        });
    </script>

</head>
<body>

    <div class="button" style="margin-bottom:20px">
        <button class="btn" id="download" onclick="HTMLtoPDF()"><i class="fa fa-download"></i> PDF versiyanı yüklə</button>
    </div>


    <div class="resume" id="resume">
        <div class="column">
            <div class="grid">
                <section class="profile">
                    <h1>@Model.Info.Name @Model.Info.Surname</h1>
                    <p><em>@Model.Info.Speciality</em></p>
                    <img src="@Model.Info.FotoURL" alt="">
                </section>
                <section class="socials">
                    <h2>ƏLAQƏ</h2>
                    <ul>
                        <li><i class="fas fa-map-marker-alt"></i> @Model.Info.Adress </li>
                        <li><i class="fas fa-birthday-cake"></i> @Model.Info.BirthDate.ToString("dd-MM-yyyy") </li>
                        <li><i class="fas fa-phone"></i> @Model.Info.Telephone </li>
                        <li><i class="fas fa-at"></i> @Model.Info.Email </li>
                        @foreach (var item in Model.Sosials)
                        {
                            <li>@Html.Raw(item.Icon) <a href="@item.PageURL">@item.Name</a></li>
                        }
                    </ul>
                </section>
            </div>

            <section class="objectives">
                <h2>HAQQIMDA</h2>
                <p style="font-size:1.25rem">
                    @Html.Raw(Model.Info.About)
                </p>
            </section>

            <section class="education">
                <h2>TƏHSİL</h2>
                <ul class="timeline">
                    @foreach (var item in Model.Educations)
                    {
                        if (item.ShowMonth)
                        {
                            educationDate += "MM.";
                        }
                        if (item.ShowYear)
                        {
                            educationDate += "yyyy";
                        }
                        <li class="event">
                            <span class="duration">@item.StartDate.ToString(educationDate)  <span style="color:salmon">@(item.Present == true? "Dəvam edir" : item.EndDate.ToString(educationDate))</span></span>
                            @(educationDate = null)
                            <div class="content">
                                <h3>@item.EducationCenter</h3>
                                <p><em><strong>@item.Description</strong></em></p>
                                <p>* @item.Faculty</p>
                                <p>* @item.Specialty</p>
                            </div>
                        </li>
                    }
                </ul>
            </section>

            <section class="experience">
                <h2>TƏCRÜBƏ</h2>
                <ul class="timeline">
                    @foreach (var item in Model.Experiences)
                    {
                        if (item.ShowMonth)
                        {
                            experienceDate += "MM.";
                        }
                        if (item.ShowYear)
                        {
                            experienceDate += "yyyy";
                        }
                        <li class="event">
                            <span class="duration">@item.StartDate.ToString(experienceDate)  <span style="color:salmon">@(item.Present == true? "Dəvam edir" : item.EndDate.ToString(experienceDate))</span></span>
                            @(experienceDate = null)
                            <div class="content">
                                <h3>@item.Company</h3>
                                <p><em><strong>@item.Position</strong></em></p>
                                <p>* @item.Description</p>
                            </div>
                        </li>
                    }
                </ul>
            </section>

            <section class="skills">
                <h2>BİLİK VƏ BACARIQLAR</h2>
                <ul>
                    @foreach (var category in Model.Skills.Select(x => x.SkillCategory).Distinct())
                    {
                        <li>
                            <h3>@category.Category</h3>
                            <ul>
                                @foreach (var item in Model.Skills.Where(x => x.SkillCategoryID == category.ID))
                                {
                                    <li>
                                        <div class="row">
                                            <div class="col-md-8">

                                            </div>
                                            <div class="col-md-4">

                                            </div>
                                        </div>
                                    </li>
                                }

                                <li>A?</li>
                                <li>Possimus.</li>
                                <li>Quaerat?</li>
                                <li>Enim.</li>
                                <li>Illo!</li>
                                <li>Optio.</li>
                                <li>Tenetur!</li>
                            </ul>
                        </li>
                    }

                </ul>
                <figure class="highcharts-figure">
                    <div id="container"></div>
                    <p class="highcharts-description">
                        A spiderweb chart or radar chart is a variant of the polar chart.
                        Spiderweb charts are commonly used to compare multivariate data sets,
                        like this demo using six variables of comparison.
                    </p>
                </figure>
            </section>
        </div>

        <div class="column">

        </div>
    </div>

    <!-- #region Scripts for Fontawesume icons -->
    <script defer src="https://use.fontawesome.com/releases/v5.0.8/js/all.js" integrity="sha384-SlE991lGASHoBfWbelyBPLsUlwY1GwNDJo3jSJO04KZ33K2bwfV9YBauFfnzvynJ" crossorigin="anonymous"></script>
    <script src="https://use.fontawesome.com/7b0b2c68b4.js"></script>
    <!-- #endregion -->
    <!-- #region HTML to PDF -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js"></script>
    <script type="text/javascript" src="~/Converter/html2canvas.min.js"></script>
    <script type="text/javascript" src="https://raw.githack.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js"></script>

    <script>
        function HTMLtoPDF() {
            var element = document.getElementById("resume");

            html2pdf(element);
        }
    </script>
    <!-- #endregion -->
    <!-- #region Diagram (highcharts.com) -->
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>

    <script>
        Highcharts.chart('container', {

            chart: {
                polar: true,
                type: 'line'
            },

            accessibility: {
                description: 'A spiderweb chart compares the allocated budget against actual spending within an organization. The spider chart has six spokes. Each spoke represents one of the 6 departments within the organization: sales, marketing, development, customer support, information technology and administration. The chart is interactive, and each data point is displayed upon hovering. The chart clearly shows that 4 of the 6 departments have overspent their budget with Marketing responsible for the greatest overspend of $20,000. The allocated budget and actual spending data points for each department are as follows: Sales. Budget equals $43,000; spending equals $50,000. Marketing. Budget equals $19,000; spending equals $39,000. Development. Budget equals $60,000; spending equals $42,000. Customer support. Budget equals $35,000; spending equals $31,000. Information technology. Budget equals $17,000; spending equals $26,000. Administration. Budget equals $10,000; spending equals $14,000.'
            },

            title: {
                text: 'Budget vs spending',
                x: -80
            },

            pane: {
                size: '80%'
            },

            xAxis: {
                categories: ['Sales', 'Marketing', 'Development', 'Customer Support',
                    'Information Technology', 'Administration'],
                tickmarkPlacement: 'on',
                lineWidth: 0
            },

            yAxis: {
                gridLineInterpolation: 'polygon',
                lineWidth: 0,
                min: 0
            },

            tooltip: {
                shared: true,
                pointFormat: '<span style="color:{series.color}">{series.name}: <b>${point.y:,.0f}</b><br/>'
            },

            legend: {
                align: 'right',
                verticalAlign: 'middle',
                layout: 'vertical'
            },

            series: [{
                name: 'Allocated Budget',
                data: [43000, 19000, 60000, 35000, 17000, 10000],
                pointPlacement: 'on'
            }, {
                name: 'Actual Spending',
                data: [50000, 39000, 42000, 31000, 26000, 14000],
                pointPlacement: 'on'
            }],

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            align: 'center',
                            verticalAlign: 'bottom',
                            layout: 'horizontal'
                        },
                        pane: {
                            size: '70%'
                        }
                    }
                }]
            }

        }); 
    </script>

    <!-- #endregion -->
</body>
</html>


<!--For pfd https://github.com/MrRio/jsPDF -->